select(name) %>%
filter(starts_with(sl))
msleep %>%
select(name) %>%
filter(starts_with("sl"))
?starts_with
msleep %>%
select(name) %>%
filter(starts_with('sl'))
msleep %>%
select(name)
msleep %>%
select(name) %>%
filter(starts_with('sl'))
library(cowsay)
say("KIKO <3 PENIS", "chicken")
say("KIKO <3 PENIS", "cat")
say("VAL <3 PENIS", "cat")
say("VAL <3 PENIS", "catface")
say("VAL <3 PENIS", "shark")
say("boo!", "ghost")
say("hello world", by = "cow", type = "warning")
say(what = "arresteddevelopment",
by = sample(names(animals), 1),
what_color = rgb(.1, .2, .3),
by_color = sample(colors(), 5),
type = "message")
say(what = "arresteddevelopment",
by = sample(names(animals), 1),
type = "message")
say(what = "arresteddevelopment",
by = sample(names(animals), 1),
type = "message")
say("hello world", by = "cow", type = "warning")
msleep %>%
select(name, starts_with('sl')) %>%
filter(starts_with('sl'))
msleep %>%
select(name, starts_with('sl'))
newdf<- msleep %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
View(newdf)
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total)) %>%
filter(mean<2, mean>19)
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total)) %>%
filter(mean>2, mean<19)
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
filter(sleep_total>2, sleep_total<19) %>%
summarise(mean=mean(sleep_total))
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
filter(sleep_total>2, sleep_total<19)
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
filter(sleep_total>2 | sleep_total<19) %>%
summarise(mean=mean(sleep_total))
newdf<- msleep %>%
group_by(vore) %>%
filter(sleep_total>2 | sleep_total<19)
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
filter(sleep_total>2 , sleep_total<19)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
View(newdf)
newdf1<- msleep %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
View(newdf1)
View(msleep)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(conservation!=domesticated) %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(conservation!='domesticated') %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(conservation!='domesticated')
View(newdf)
newdf<- msleep %>% drop_na
newdf<- msleep %>% is.na
View(newdf)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(is.na=TRUE)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(is.na==TRUE)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(conservation!='domesticated')
View(newdf)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(!conservation %in% 'domesticated')
View(newdf)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(conservation!='domesticated')
View(newdf)
View(msleep)
View(newdf)
View(msleep)
View(msleep)
newdfNONA<- msleep %>%
na.omit()%>%
mtcars
qplot(disp, mpg, data=mtcars)
library(ggplot2)
qplot(disp, mpg, data=mtcars)
ggplot(mtcars, aes(x=disp, mpg))
ggplot(mtcars, aes(x=disp, mpg))+
geom_point()
ggplot(mtcars, aes(x=disp, mpg))+
geom_bar()
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line()
ggplot(mydata, aes(x=xcol, y=ycol), ylim=0) + geom_line()
ggplot(pressure, aes(x=xcol, y=ycol), ylim=0) + geom_line()
source('~/.active-rstudio-document', echo=TRUE)
xvar
zvar
rep(1, 1500)
(2, 1500)
rep(2, 1500)
xy
g1<-ggplot(xy, aes(xvar))+
geom_histogram()
g1
plot(xvar)
hist(xvar)
g1
g1<-ggplot(xy, aes(xvar))+
geom_histogram(binwidth = 1)
ggplot(xy, aes(xvar))+
geom_histogram(binwidth = 1)
ggplot(xy, aes(xvar))+
geom_histogram(fill=NA)
ggplot(xy, aes(xvar))+
geom_histogram(fill=NA, color='black')
ggplot(xy, aes(xvar))+
geom_histogram(fill=NA, color='black') +
theme_bw()
ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
theme_bw()
g1<-ggplot(xy, aes(xvar))+
geom_histogram(fill=NA, color='black') +
theme_bw()
g2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
theme_bw()
grid.arrange(g1, g2, nrow=1)
p1<-ggplot(xy, aes(xvar)) + geom_density()
p1
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
geom_density(color="blue")
ps
p2
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill='black') +
geom_density(color="blue")
p2
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill='yellow') +
geom_density(color="blue")
p2
p3<-ggplot(xy, aes(xvar, fill = zvar)) + geom_density(alpha = 0.2)
p3
p3
grid.arrange(p1, p2, p3, nrow=1)
####BOXPLOT####
b1<-ggplot(xy, aes(zvar, xvar)) +
geom_boxplot(aes(fill = zvar)) +
theme(legend.position = "none")
b1
#jitter plot
b2<-ggplot(xy, aes(zvar, xvar)) +
geom_jitter(alpha=I(1/4), aes(color=zvar)) +
theme(legend.position = "none")
b2
#volcano plot
b3<-ggplot(xy, aes(x = xvar)) +
stat_density(aes(ymax = ..density..,  ymin = -..density..,
fill = zvar, color = zvar),
geom = "ribbon", position = "identity") +
facet_grid(. ~ zvar) +
coord_flip() +
theme(legend.position = "none")
b3
grid.arrange(b1, b2, b3, nrow=1)
#rug plot
ggplot(xy,aes(xvar,yvar))  + geom_point() + geom_rug(col="darkred",alpha=.1)
#rug plot
R1<-ggplot(xy,aes(xvar,yvar))  + geom_point() + geom_rug(col="darkred",alpha=.1)
#placeholder plot - prints nothing at all
empty <- ggplot()+geom_point(aes(1,1), colour="white") +
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
)
empty
#scatterplot of x and y variables
scatter <- ggplot(xy,aes(xvar, yvar)) +
geom_point(aes(color=zvar)) +
scale_color_manual(values = c("orange", "purple")) +
theme(legend.position=c(1,1),legend.justification=c(1,1))
scatter
#marginal density of x - plot on top
plot_top <- ggplot(xy, aes(xvar, fill=zvar)) +
geom_density(alpha=.5) +
scale_fill_manual(values = c("orange", "purple")) +
theme(legend.position = "none")
plot_top
#marginal density of y - plot on the right
plot_right <- ggplot(xy, aes(yvar, fill=zvar)) +
geom_density(alpha=.5) +
coord_flip() +
scale_fill_manual(values = c("orange", "purple")) +
theme(legend.position = "none")
plot_right
#arrange the plots together, with appropriate height and width for each row and column
grid.arrange(plot_top, empty, scatter, plot_right, ncol=2, nrow=2, widths=c(4, 1), heights=c(1, 4))
source('~/.active-rstudio-document', echo=TRUE)
install.packages(shiny)
install.packages("shiny")
install.packages("shiny")
install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
load("C:/Users/Sergi Ch/Downloads/UBIQUM/PROJECT 1/TASK 1/Blackwell_Hist_Sample.csv")
load("C:/Users/Sergi Ch/Downloads/UBIQUM/Blackwell_Hist_Sample.csv")
load("C:/Users/Sergi Ch/Downloads/Blackwell_Hist_Sample.csv")
source('C:/Users/Sergi Ch/Downloads/UBIQUM/UBIQUM/Wifi Locationing/scripts/01 Wifi Locationing_DATA_EXPLORATION.R', echo=TRUE)
#WAPs with low variance
variance <- sapply(training2[,c(1:length(training2))], var)
variance
#WAPs with low variance
variance <- sapply(training2[,c(1:length(training2))], var)
low_variance_WAP <- sapply(variance, function(x){
(x<5)
})
variance
#WAPs with low variance
variance <- sapply(training2[,c(1:length(training2))], var)
variance
#WAPs with low variance
variance <- sapply(training2[,c(11:length(training2))], var)
variance
low_variance_WAP <- sapply(variance, function(x){
(x<5)
})
low_variance_WAP
which(low_variance_WAP, arr.ind = TRUE)
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
x
x <- df(a = 1:5, b = rnorm(10))
x <- as.data.frame(a = 1:5, b = rnorm(10))
x <- as.data.frame(a = 1:5, b = rnorm(10))
x <- matrix(a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- list(a = 1:5, b = rnorm(10))
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
x <- 1:4
x
lapply(x, runif)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
sapply(x, mean)
X<-matrix(rnorm(30), nrow=5, ncol=6)
apply(X,2 ,sum)
#round by columns
apply(x, 2, round)
x<- matrix(rnorm(30), nrow=5, ncol=6)
#round by columns
apply(x, 2, round)
apply(x,2 ,sum)
apply(x,2 ,sum, round)
#create a list of matrices:
A<-matrix(1:9, 3,3)
B<-matrix(4:15, 4,3)
C<-matrix(8:10, 3,2)
MyList<-list(A,B,C) # display the list
MyList
apply(MyList,"[", , 2)
apply(MyList,"[",  2)
apply(MyList,"[",2)
lapply(MyList,"[", , 2)
lapply(MyList,"[", 1, )
lapply(MyList,"[", 1 )
lapply(MyList,"[",  2)
MyList
lapply(MyList,"[",  2)
lapply(MyList,"[",  ,2)
lapply(MyList,  ,2)
lapply(MyList,"[", c(1,2))
lapply(MyList,"[", c(1,2), 2)
View(MyList)
Z=sapply(MyList,"[", 1,1 )
Z
MyList
m <- matrix(c(1:10, 11:20), nrow = 10, ncol = 2)
apply(m, 2, mean)
apply(m, 2, mean)
m
apply(m, 1, mean)
apply(m, c(1,2), mean)
apply(m, 2, mean)
apply(m, 1, mean)
# mean of the rows
apply(m, 1, mean)
# mean of the columns
apply(m, 2, mean)
# divide all values by 2
apply(m, 1:2, function(x) x/2)
l <- list(a = 1:10, b = 11:20)
l
lapply(l, mean)
l
lapply(l, mean)
# create a list with 2 elements
l <- list(a = 1:10, b = 11:20)
# mean of values using sapply
l.mean <- sapply(l, mean)
# what type of object was returned?
class(l.mean)
l.mean
# it's a numeric vector, so we can get element "a" like this
l.mean[['a']]
#Check the means of all the Variables
means<-0
for (i in 1:530){
means[i]<-mean(training[,i])
}
means
means<-as.data.frame(means)
indices<-c()
for (i in 11:530){
if(means[i,]==100){
indices[i]<- i
}
}
indices
training2<- training[is.na(indices)]
training2
View(training2)
#WAPs with low variance
variance <- sapply(training2[,c(11:length(training2))], var)
variance
low_variance_WAP <- sapply(variance, function(x){
(x<5)
})
low_variance_WAP
which(low_variance_WAP, arr.ind = TRUE)
change_WAP_value <- apply(trainingData1[,c(1:465)], 2, function(x) {ifelse(x == 100, -105, x)})
#if WAP value is 100 chanage to -105
change_WAP_value <- apply(training2[,c(1:465)], 2, function(x) {ifelse(x == 100, -105, x)})
change_WAP_value
variance
low_variance_WAP
which(low_variance_WAP, arr.ind = TRUE)
low_variance_WAP<- which(low_variance_WAP, arr.ind = TRUE)
low_variance_WAP
low_variance_WAP[2]
low_variance_WAP[2,1]
as.data.frame(low_variance_WAP)
indices<-low_variance_WAP[2]
indices
indices<-low_variance_WAP[,2]
indices<-low_variance_WAP[,1]
low_variance_WAP
low_variance_WAP<- as.data.frame(which(low_variance_WAP, arr.ind = TRUE))
low_variance_WAP<- as.data.frame(low_variance_WAP)
low_variance_WAP<- as.data.frame(low_variance_WAP)
low_variance_WAP
View(low_variance_WAP)
indices<-low_variance_WAP[,1]
indices
training2<- training[(indices)]
training2<- training[is.na(indices)]
indices<-c()
for (i in 11:530){
if(means[i,]==100){
indices[i]<- i
}
}
training2<- training[is.na(indices)]
training2<- training[!(indices)]
training2<- training[-(indices)]
training2<- training[(-indices)]
training2<- training[c(indices)]
variance <- sapply(training2[,c(11:length(training2))], var)
low_variance_WAP <- sapply(variance, function(x){
(x<5)
})
low_variance_WAP<- which(low_variance_WAP, arr.ind = TRUE)
low_variance_WAP<- as.data.frame(low_variance_WAP)
indices2<-low_variance_WAP[,1]
training3<- training2[(indices2)]
View(training3)
indices2<-low_variance_WAP[,1]
training3<- training2[!(indices2)]
variance <- sapply(training2[,c(11:length(training2))], var)
low_variance_WAP <- sapply(variance, function(x){
(x<5)
})
low_variance_WAP<- which(low_variance_WAP, arr.ind = TRUE)
low_variance_WAP<- as.data.frame(low_variance_WAP)
indices2<-low_variance_WAP[,1]
training3<- training2[!(indices2)]
training3<- training2![(indices2)]
####4.VARIANCE ####
#WAPs with low variance
variance <- sapply(training2[,c(11:length(training2))], var)
low_variance_WAP <- sapply(variance, function(x){
(x>5)
})
low_variance_WAP<- which(low_variance_WAP, arr.ind = TRUE)
low_variance_WAP<- as.data.frame(low_variance_WAP)
indices2<-low_variance_WAP[,1]
indices2
training3<- training2[(indices2)]
training3<- training2[-(indices2)]
####4.VARIANCE ####
#WAPs with low variance
variance <- sapply(training2[,c(11:length(training2))], var)
low_variance_WAP <- sapply(variance, function(x){
(x<5)
})
low_variance_WAP<- which(low_variance_WAP, arr.ind = TRUE)
low_variance_WAP<- as.data.frame(low_variance_WAP)
indices2<-low_variance_WAP[,1]
training3<- training2[-(indices2)]
variance
sapply(training2[,c(11:length(training2))], max)
sapply(training2[,c(11:length(training2))], min)
sapply(training2[,c(11:length(training2))], function(x) {})
sapply(training2[,c(11:length(training2))], function(x) {
(x!=100 mean(x))
})
sapply(training2[,c(11:length(training2))], function(x) {
if (x!=100) {
mean(x)
}
})
training2[ training2 == 100] <-NA
View(training2)
sapply(training2[,c(11:length(training2))],mean)
?mean
sapply(training2[,c(11:length(training2))],mean(x, na.rm=TRUE))
sapply(training2[,c(11:length(training2))],mean(na.rm=TRUE))
sapply(training2[,c(11:length(training2))], function (x){
mean(x, na.rm=TRUE)
})
sapply(training2[,c(11:length(training2))], function (x){
mean(x, na.rm=TRUE)
min(x)
})
sapply(training2[,c(11:length(training2))], function (x){
min(x, na.rm=TRUE)
})
multi.fun <- function(x) {
c(min = min(x, na.rm=TRUE), mean = mean(x, na.rm=TRUE), max = max(x, na.rm=TRUE))
}
sapply(training2[,c(11:length(training2))], multi.fun)
metrics<- sapply(training2[,c(11:length(training2))], multi.fun)
?mean
View(metrics)
View(by_building)
sapply(training2[,c(11:length(training2))], function(x) {})
remove(A,B,C)
remove(l,m)
View(WAPs_location)
validation[ validation == 100] <-NA
#function that shows mean, max, min
multi.fun <- function(x) {
c(min = min(x, na.rm=TRUE), mean = mean(x, na.rm=TRUE), max = max(x, na.rm=TRUE))
}
metrics<- sapply(validation, multi.fun)
View(metrics)
