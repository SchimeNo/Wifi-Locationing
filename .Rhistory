CleanData <- readRDS("EnergyCleanData.rds")
View(CleanData)
#create year, quarter, month, week, weekday, day, hour and minute
newData$year <- year(newData$DateTime)
newData$month <- month(newData$DateTime)
## Feature Engineering (run if you need certain time variables) ----
CleanData$Year <- year(CleanData$DateTime)
CleanData$Month <- month(CleanData$DateTime)
View(CleanData)
april<- CleanData %>%
filter(Year==2008, Month==4)
View(april)
CleanData$Week <- week(CleanData$DateTime)
april<- CleanData %>%
filter(Year==2008, Month==4) %>%
group_by(Week) %>%
summarize(missing=sum(Week))
View(april)
source('C:/Users/Sergi Ch/Downloads/UBIQUM/R/dplyr_Workshop_student.R', echo=TRUE)
msleep %>%
select(name) %>%
filter(starts_with(sl))
msleep %>%
select(name) %>%
filter(starts_with("sl"))
?starts_with
msleep %>%
select(name) %>%
filter(starts_with('sl'))
msleep %>%
select(name)
msleep %>%
select(name) %>%
filter(starts_with('sl'))
library(cowsay)
say("KIKO <3 PENIS", "chicken")
say("KIKO <3 PENIS", "cat")
say("VAL <3 PENIS", "cat")
say("VAL <3 PENIS", "catface")
say("VAL <3 PENIS", "shark")
say("boo!", "ghost")
say("hello world", by = "cow", type = "warning")
say(what = "arresteddevelopment",
by = sample(names(animals), 1),
what_color = rgb(.1, .2, .3),
by_color = sample(colors(), 5),
type = "message")
say(what = "arresteddevelopment",
by = sample(names(animals), 1),
type = "message")
say(what = "arresteddevelopment",
by = sample(names(animals), 1),
type = "message")
say("hello world", by = "cow", type = "warning")
msleep %>%
select(name, starts_with('sl')) %>%
filter(starts_with('sl'))
msleep %>%
select(name, starts_with('sl'))
newdf<- msleep %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
View(newdf)
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total)) %>%
filter(mean<2, mean>19)
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total)) %>%
filter(mean>2, mean<19)
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
filter(sleep_total>2, sleep_total<19) %>%
summarise(mean=mean(sleep_total))
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
filter(sleep_total>2, sleep_total<19)
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
filter(sleep_total>2 | sleep_total<19) %>%
summarise(mean=mean(sleep_total))
newdf<- msleep %>%
group_by(vore) %>%
filter(sleep_total>2 | sleep_total<19)
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
filter(sleep_total>2 , sleep_total<19)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
View(newdf)
newdf1<- msleep %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
View(newdf1)
View(msleep)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(conservation!=domesticated) %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(conservation!='domesticated') %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(conservation!='domesticated')
View(newdf)
newdf<- msleep %>% drop_na
newdf<- msleep %>% is.na
View(newdf)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(is.na=TRUE)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(is.na==TRUE)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(conservation!='domesticated')
View(newdf)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(!conservation %in% 'domesticated')
View(newdf)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(conservation!='domesticated')
View(newdf)
View(msleep)
View(newdf)
View(msleep)
View(msleep)
newdfNONA<- msleep %>%
na.omit()%>%
mtcars
qplot(disp, mpg, data=mtcars)
library(ggplot2)
qplot(disp, mpg, data=mtcars)
ggplot(mtcars, aes(x=disp, mpg))
ggplot(mtcars, aes(x=disp, mpg))+
geom_point()
ggplot(mtcars, aes(x=disp, mpg))+
geom_bar()
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line()
ggplot(mydata, aes(x=xcol, y=ycol), ylim=0) + geom_line()
ggplot(pressure, aes(x=xcol, y=ycol), ylim=0) + geom_line()
source('~/.active-rstudio-document', echo=TRUE)
xvar
zvar
rep(1, 1500)
(2, 1500)
rep(2, 1500)
xy
g1<-ggplot(xy, aes(xvar))+
geom_histogram()
g1
plot(xvar)
hist(xvar)
g1
g1<-ggplot(xy, aes(xvar))+
geom_histogram(binwidth = 1)
ggplot(xy, aes(xvar))+
geom_histogram(binwidth = 1)
ggplot(xy, aes(xvar))+
geom_histogram(fill=NA)
ggplot(xy, aes(xvar))+
geom_histogram(fill=NA, color='black')
ggplot(xy, aes(xvar))+
geom_histogram(fill=NA, color='black') +
theme_bw()
ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
theme_bw()
g1<-ggplot(xy, aes(xvar))+
geom_histogram(fill=NA, color='black') +
theme_bw()
g2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
theme_bw()
grid.arrange(g1, g2, nrow=1)
p1<-ggplot(xy, aes(xvar)) + geom_density()
p1
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
geom_density(color="blue")
ps
p2
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill='black') +
geom_density(color="blue")
p2
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill='yellow') +
geom_density(color="blue")
p2
p3<-ggplot(xy, aes(xvar, fill = zvar)) + geom_density(alpha = 0.2)
p3
p3
grid.arrange(p1, p2, p3, nrow=1)
####BOXPLOT####
b1<-ggplot(xy, aes(zvar, xvar)) +
geom_boxplot(aes(fill = zvar)) +
theme(legend.position = "none")
b1
#jitter plot
b2<-ggplot(xy, aes(zvar, xvar)) +
geom_jitter(alpha=I(1/4), aes(color=zvar)) +
theme(legend.position = "none")
b2
#volcano plot
b3<-ggplot(xy, aes(x = xvar)) +
stat_density(aes(ymax = ..density..,  ymin = -..density..,
fill = zvar, color = zvar),
geom = "ribbon", position = "identity") +
facet_grid(. ~ zvar) +
coord_flip() +
theme(legend.position = "none")
b3
grid.arrange(b1, b2, b3, nrow=1)
#rug plot
ggplot(xy,aes(xvar,yvar))  + geom_point() + geom_rug(col="darkred",alpha=.1)
#rug plot
R1<-ggplot(xy,aes(xvar,yvar))  + geom_point() + geom_rug(col="darkred",alpha=.1)
#placeholder plot - prints nothing at all
empty <- ggplot()+geom_point(aes(1,1), colour="white") +
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
)
empty
#scatterplot of x and y variables
scatter <- ggplot(xy,aes(xvar, yvar)) +
geom_point(aes(color=zvar)) +
scale_color_manual(values = c("orange", "purple")) +
theme(legend.position=c(1,1),legend.justification=c(1,1))
scatter
#marginal density of x - plot on top
plot_top <- ggplot(xy, aes(xvar, fill=zvar)) +
geom_density(alpha=.5) +
scale_fill_manual(values = c("orange", "purple")) +
theme(legend.position = "none")
plot_top
#marginal density of y - plot on the right
plot_right <- ggplot(xy, aes(yvar, fill=zvar)) +
geom_density(alpha=.5) +
coord_flip() +
scale_fill_manual(values = c("orange", "purple")) +
theme(legend.position = "none")
plot_right
#arrange the plots together, with appropriate height and width for each row and column
grid.arrange(plot_top, empty, scatter, plot_right, ncol=2, nrow=2, widths=c(4, 1), heights=c(1, 4))
source('~/.active-rstudio-document', echo=TRUE)
install.packages(shiny)
install.packages("shiny")
install.packages("shiny")
install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
load("C:/Users/Sergi Ch/Downloads/UBIQUM/PROJECT 1/TASK 1/Blackwell_Hist_Sample.csv")
load("C:/Users/Sergi Ch/Downloads/UBIQUM/Blackwell_Hist_Sample.csv")
load("C:/Users/Sergi Ch/Downloads/Blackwell_Hist_Sample.csv")
load("C:/Users/Sergi Ch/Downloads/UBIQUM/UBIQUM/Wifi Locationing/modeling.RData")
#B0F0
WAPs<-grep("WAP|LONGITUDE", names(Training_sample), value=T)
kNN_B0<-knnreg(x=as.matrix(building0[WAPs]), y=building0$LATITUDE, k=5)
pacman::p_load(DT, dplyr, caret, dplyr,
ggplot2, lattice, rstudioapi,
readr, plotly, htmltools, e1071,
randomForest, h2o, class, parallelSVM)
kNN_B0<-knnreg(x=as.matrix(building0[WAPs]), y=building0$LATITUDE, k=5)
pred_B0<- predict(kNN_B0, validation0)
building0<- train %>% filter(BUILDINGID==0) %>% mutate( FLOOR=as.character(FLOOR))   #78 Rooms 4Floors
building1<- train %>% filter(BUILDINGID==1) %>% mutate( FLOOR=as.character(FLOOR))
building2<- train %>% filter(BUILDINGID==2) %>% mutate( FLOOR=as.character(FLOOR))
validation0 <- validation %>% filter(BUILDINGID==0) %>%  mutate( FLOOR=as.character(FLOOR))
validation1 <- validation %>% filter(BUILDINGID==1)%>%  mutate( FLOOR=as.character(FLOOR))
validation2 <- validation %>% filter(BUILDINGID==2)%>%  mutate( FLOOR=as.character(FLOOR))
building0 <- building0 %>% mutate(FLOOR=as.factor(FLOOR))
building1 <- building1 %>% mutate(FLOOR=as.factor(FLOOR))
building2 <- building2 %>% mutate(FLOOR=as.factor(FLOOR))
validation0 <- validation0 %>% mutate(FLOOR=as.factor(FLOOR))
validation1 <- validation1 %>% mutate(FLOOR=as.factor(FLOOR))
validation2 <- validation2 %>% mutate(FLOOR=as.factor(FLOOR))
kNN_B0<-knnreg(x=as.matrix(building0[WAPs]), y=building0$LATITUDE, k=5)
pred_B0<- predict(kNN_B0, validation0)
#B0F0
WAPs<-grep("WAP|LONGITUDE", names(Training_sample), value=T)
#B0F0
WAPs<-grep("WAP|LONGITUDE", names(building0), value=T)
kNN_B0<-knnreg(x=as.matrix(building0[WAPs]), y=building0$LATITUDE, k=5)
pred_B0<- predict(kNN_B0, validation0)
kNN_B0
#Loading the data
#training_original<- read.csv("./datasets/trainingData.csv")
#validation_original<- read.csv("./datasets/validationData.csv")
train<- readRDS("./datasets/training2.rds")
validation<- readRDS("./datasets/validation2.rds")
#### Subsetting####
building0<- train %>% filter(BUILDINGID==0) %>% mutate( FLOOR=as.character(FLOOR))   #78 Rooms 4Floors
building1<- train %>% filter(BUILDINGID==1) %>% mutate( FLOOR=as.character(FLOOR))
building2<- train %>% filter(BUILDINGID==2) %>% mutate( FLOOR=as.character(FLOOR))
validation0 <- validation %>% filter(BUILDINGID==0) %>%  mutate( FLOOR=as.character(FLOOR))
validation1 <- validation %>% filter(BUILDINGID==1)%>%  mutate( FLOOR=as.character(FLOOR))
validation2 <- validation %>% filter(BUILDINGID==2)%>%  mutate( FLOOR=as.character(FLOOR))
building0 <- building0 %>% mutate(FLOOR=as.factor(FLOOR))
building1 <- building1 %>% mutate(FLOOR=as.factor(FLOOR))
building2 <- building2 %>% mutate(FLOOR=as.factor(FLOOR))
validation0 <- validation0 %>% mutate(FLOOR=as.factor(FLOOR))
validation1 <- validation1 %>% mutate(FLOOR=as.factor(FLOOR))
validation2 <- validation2 %>% mutate(FLOOR=as.factor(FLOOR))
####KNN without standarize####
set.seed(123)
## kNN Train Control
kNNcontrol <- trainControl(method = "repeatedcv", number = 6, repeats = 2, preProc = c("center", "range"))
building2<- train %>% filter(BUILDINGID==2) %>% mutate( FLOOR=as.character(FLOOR))
####0. Libraries and directories####
pacman::p_load(DT, dplyr, caret, dplyr,
ggplot2, lattice, rstudioapi,
readr, plotly, htmltools, e1071,
randomForest, h2o, class, parallelSVM)
h2o.init( )
#setting up directory
current_path=getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
list.files("datasets/")
#Loading the data
#training_original<- read.csv("./datasets/trainingData.csv")
#validation_original<- read.csv("./datasets/validationData.csv")
train<- readRDS("./datasets/training2.rds")
validation<- readRDS("./datasets/validation2.rds")
# Load MODELS
rf_reg_caret<-readRDS("./models/RF_Model.rds")
#FLOOR MODELS
Building0_Model_GBM<-readRDS("./models/GBM_Floor_Building0.rds")
Building0_Model <- h2o.loadModel(path=paste0(getwd(),"/","models", "/", "RF_Floor_Building0"))
Building1_Model<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "ensemble_FLOOR_B1"))
Building2_Model<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "GBM_Floor_Building2"))
#LONGITUDE MODELS
Building0_LONGITUDE_RF<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "Building0_LONGITUDE_RF"))
Building1_LONGITUDE_RF<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "Building1_LONGITUDE_RF"))
Building2_LONGITUDE_RF<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "Building2_LONGITUDE_RF"))
#LATITUDE MODELS
Building0_LATITUDE_RF<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "Building0_LATITUDE_RF"))
Building1_LATITUDE_KNN<-readRDS("./models/Building1_LATITUDE_KNN.rds")
Building2_LATITUDE_KNN<-readRDS("./models/Building2_LATITUDE_KNN.rds")
#### Subsetting####
building0<- train %>% filter(BUILDINGID==0) %>% mutate( FLOOR=as.character(FLOOR))
building1<- train %>% filter(BUILDINGID==1) %>% mutate( FLOOR=as.character(FLOOR))
building2<- train %>% filter(BUILDINGID==2) %>% mutate( FLOOR=as.character(FLOOR))
validation0 <- validation %>% filter(BUILDINGID==0) %>%  mutate( FLOOR=as.character(FLOOR))
validation1 <- validation %>% filter(BUILDINGID==1)%>%  mutate( FLOOR=as.character(FLOOR))
validation2 <- validation %>% filter(BUILDINGID==2)%>%  mutate( FLOOR=as.character(FLOOR))
building0 <- building0 %>% mutate(FLOOR=as.factor(FLOOR))
building1 <- building1 %>% mutate(FLOOR=as.factor(FLOOR))
building2 <- building2 %>% mutate(FLOOR=as.factor(FLOOR))
validation0 <- validation0 %>% mutate(FLOOR=as.factor(FLOOR))
validation1 <- validation1 %>% mutate(FLOOR=as.factor(FLOOR))
validation2 <- validation2 %>% mutate(FLOOR=as.factor(FLOOR))
##### STANDARIZE #####
WAPs<-grep("WAP|LONGITUDE", names(building1), value=T)
preprocessParams1<-preProcess(building1[WAPs], method=c("center", "scale"))
valid_waps1<-predict(preprocessParams1, validation1[WAPs])
stand_waps1<-predict(preprocessParams1, building1[WAPs])
stand_dataset1<-cbind(stand_waps1, BUILDINGID=building1$BUILDINGID, FLOOR=building1$FLOOR, LATITUDE=building1$LATITUDE)
WAPs<-grep("WAP|LONGITUDE", names(building2), value=T)
preprocessParams2<-preProcess(building2[WAPs], method=c("center", "scale"))
valid_waps2<-predict(preprocessParams2, validation2[WAPs])
stand_waps2<-predict(preprocessParams2, building2[WAPs])
stand_dataset2<-cbind(stand_waps2, BUILDINGID=building2$BUILDINGID, FLOOR=building2$FLOOR, LATITUDE=building2$LATITUDE)
####GENERATING PREDICTIONS####
#Building
PREDICT1<-predict(rf_reg_caret, validation)
postResample(PREDICT1, validation$BUILDINGID)
C<-confusionMatrix(PREDICT1, validation$BUILDINGID)
#FLOOR BY BUILDING
#Building 0 & Longitude
test0.h2o <- as.h2o(validation0)
PRED_FBO <- as.data.frame(h2o.predict(Building0_Model, test0.h2o))
postResample(PRED_FBO, validation0$FLOOR)
table(PRED_FBO$predict, validation0$FLOOR)
PRED_B0_LONG<- as.data.frame(h2o.predict(Building0_LONGITUDE_RF, test0.h2o))
postResample(PRED_B0_LONG, validation0$LONGITUDE)
PRED_B0_LAT<- as.data.frame(h2o.predict(Building0_LATITUDE_RF, test0.h2o))
postResample(PRED_B0_LAT, validation0$LATITUDE)
#Building 1
test1.h2o <- as.h2o(validation1)
PRED_FB1 <- as.data.frame(h2o.predict(Building1_Model, test1.h2o))
postResample(PRED_FB1, validation1$FLOOR)
table(PRED_FB1$predict, validation1$FLOOR)
PRED_B1_LONG<- as.data.frame(h2o.predict(Building1_LONGITUDE_RF, test1.h2o))
postResample(PRED_B1_LONG, validation1$LONGITUDE)
PRED_B1_LAT<-predict(Building1_LATITUDE_KNN, valid_waps1)
postResample(PRED_B1_LAT, validation1$LATITUDE)
#Building 2
test2.h2o <- as.h2o(validation2)
PRED_FB2 <- as.data.frame(h2o.predict(Building2_Model, test2.h2o))
table(PRED_FB2$predict, validation2$FLOOR)
table
PRED_B2_LONG<- as.data.frame(h2o.predict(Building2_LONGITUDE_RF, test2.h2o))
postResample(PRED_B2_LONG, validation2$LONGITUDE)
PRED_B2_LAT<-predict(Building2_LATITUDE_KNN, valid_waps2)
postResample(PRED_B2_LAT, validation2$LATITUDE)
### ---- Error Check ----
## Creating data frames for random forest predictions
Building0pred <- data.frame(building = "0",
pred.longitude = PRED_B0_LONG$predict,
pred.latitude = PRED_B0_LAT$predict,
pred.floor = PRED_FBO$predict,
valid.longitude = validation0$LONGITUDE,
valid.latitude = validation0$LATITUDE,
valid.floor = validation0$FLOOR)
Building1pred <- data.frame(building = "1",
pred.longitude = PRED_B1_LONG$predict,
pred.latitude = PRED_B1_LAT,
pred.floor = PRED_FB1$predict,
valid.longitude = validation1$LONGITUDE,
valid.latitude = validation1$LATITUDE,
valid.floor = validation1$FLOOR)
Building2pred <- data.frame(building = "2",
pred.longitude = PRED_B2_LONG$predict,
pred.latitude = PRED_B2_LAT,
pred.floor = PRED_FB2$predict,
valid.longitude = validation2$LONGITUDE,
valid.latitude = validation2$LATITUDE,
valid.floor = validation2$FLOOR)
## Combining the data frames
ErrorData <- rbind(Building0pred, Building1pred, Building2pred)
## Calculating Errors
ErrorData$err.long <- abs(ErrorData$valid.longitude - ErrorData$pred.longitude)
ErrorData$err.lat <- abs(ErrorData$valid.latitude - ErrorData$pred.latitude)
ErrorData %>%
mutate_at(c("valid.floor", "pred.floor"), as.numeric) -> ErrorData
ErrorData$err.floor <- abs(ErrorData$valid.floor - ErrorData$pred.floor)
ErrorData$err.floor <- as.factor(ErrorData$err.floor)
ErrorData %>%
mutate_at(c("valid.floor",
"pred.floor"),
as.numeric) %>%
mutate(diff.floor = ifelse(valid.floor == pred.floor, 0, 1 )) %>%
mutate_at(c("valid.floor",
"pred.floor"),
as.factor) -> ErrorData
str(ErrorData)
## Checking Errors
confusionMatrix(ErrorData$pred.floor, ErrorData$valid.floor)
## Building 0 Floor Error Check
ErrorData %>%
filter(building == 0) %>%
group_by(diff.floor) %>%
count(valid.floor)
ErrorData%>%
filter(building == 2) %>%
group_by(pred.floor) %>%
ggplot(aes(pred.longitude, pred.latitude)) +
geom_point(aes(colour = factor(diff.floor))) +
facet_wrap(~pred.floor) +
labs(title = "Building 2 by Floor")
## Longitude & Latitude
ErrorData %>%
filter(building==0||building==1||building ==2 && pred.floor== 3) %>%
ggplot(aes(x = valid.longitude, y = valid.latitude)) +
geom_point(aes(x = valid.longitude,
y = valid.latitude),
color = "red") +
geom_point(aes(x = pred.longitude,
y = pred.latitude),
color = "blue") +
labs(title = "Data/Predicted") +
ylab("Latitude") +
xlab("Longitude")
ErrorData %>%
group_by(building) %>%
ggplot( aes(x=err.long)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
ErrorData0<-ErrorData %>%  filter(building == 0)
#density plot
ggplot(ErrorData0, aes(x = err.long, colour = pred.floor, fill =pred.floor)) +
geom_density(position="identity", alpha=0.6) +
scale_x_continuous(name = "MAE (m)",
limits=c(0, 60)) +
scale_y_continuous(name = "Density") +
ggtitle("Errors Longitude Building 0") +
theme_bw() +
theme(plot.title = element_text(size = 14, family = "Tahoma", face = "bold"),
text = element_text(size = 12, family = "Tahoma")) +
scale_fill_brewer(palette="Accent")
#####PLOTTING####
