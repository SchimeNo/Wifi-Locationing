g1
g1<-ggplot(xy, aes(xvar))+
geom_histogram(binwidth = 1)
ggplot(xy, aes(xvar))+
geom_histogram(binwidth = 1)
ggplot(xy, aes(xvar))+
geom_histogram(fill=NA)
ggplot(xy, aes(xvar))+
geom_histogram(fill=NA, color='black')
ggplot(xy, aes(xvar))+
geom_histogram(fill=NA, color='black') +
theme_bw()
ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
theme_bw()
g1<-ggplot(xy, aes(xvar))+
geom_histogram(fill=NA, color='black') +
theme_bw()
g2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
theme_bw()
grid.arrange(g1, g2, nrow=1)
p1<-ggplot(xy, aes(xvar)) + geom_density()
p1
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
geom_density(color="blue")
ps
p2
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill='black') +
geom_density(color="blue")
p2
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill='yellow') +
geom_density(color="blue")
p2
p3<-ggplot(xy, aes(xvar, fill = zvar)) + geom_density(alpha = 0.2)
p3
p3
grid.arrange(p1, p2, p3, nrow=1)
####BOXPLOT####
b1<-ggplot(xy, aes(zvar, xvar)) +
geom_boxplot(aes(fill = zvar)) +
theme(legend.position = "none")
b1
#jitter plot
b2<-ggplot(xy, aes(zvar, xvar)) +
geom_jitter(alpha=I(1/4), aes(color=zvar)) +
theme(legend.position = "none")
b2
#volcano plot
b3<-ggplot(xy, aes(x = xvar)) +
stat_density(aes(ymax = ..density..,  ymin = -..density..,
fill = zvar, color = zvar),
geom = "ribbon", position = "identity") +
facet_grid(. ~ zvar) +
coord_flip() +
theme(legend.position = "none")
b3
grid.arrange(b1, b2, b3, nrow=1)
#rug plot
ggplot(xy,aes(xvar,yvar))  + geom_point() + geom_rug(col="darkred",alpha=.1)
#rug plot
R1<-ggplot(xy,aes(xvar,yvar))  + geom_point() + geom_rug(col="darkred",alpha=.1)
#placeholder plot - prints nothing at all
empty <- ggplot()+geom_point(aes(1,1), colour="white") +
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
)
empty
#scatterplot of x and y variables
scatter <- ggplot(xy,aes(xvar, yvar)) +
geom_point(aes(color=zvar)) +
scale_color_manual(values = c("orange", "purple")) +
theme(legend.position=c(1,1),legend.justification=c(1,1))
scatter
#marginal density of x - plot on top
plot_top <- ggplot(xy, aes(xvar, fill=zvar)) +
geom_density(alpha=.5) +
scale_fill_manual(values = c("orange", "purple")) +
theme(legend.position = "none")
plot_top
#marginal density of y - plot on the right
plot_right <- ggplot(xy, aes(yvar, fill=zvar)) +
geom_density(alpha=.5) +
coord_flip() +
scale_fill_manual(values = c("orange", "purple")) +
theme(legend.position = "none")
plot_right
#arrange the plots together, with appropriate height and width for each row and column
grid.arrange(plot_top, empty, scatter, plot_right, ncol=2, nrow=2, widths=c(4, 1), heights=c(1, 4))
source('~/.active-rstudio-document', echo=TRUE)
install.packages(shiny)
install.packages("shiny")
install.packages("shiny")
install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
load("C:/Users/Sergi Ch/Downloads/UBIQUM/PROJECT 1/TASK 1/Blackwell_Hist_Sample.csv")
load("C:/Users/Sergi Ch/Downloads/UBIQUM/Blackwell_Hist_Sample.csv")
load("C:/Users/Sergi Ch/Downloads/Blackwell_Hist_Sample.csv")
load("C:/Users/Sergi Ch/Downloads/UBIQUM/UBIQUM/Wifi Locationing/modeling.RData")
#B0F0
WAPs<-grep("WAP|LONGITUDE", names(Training_sample), value=T)
kNN_B0<-knnreg(x=as.matrix(building0[WAPs]), y=building0$LATITUDE, k=5)
pacman::p_load(DT, dplyr, caret, dplyr,
ggplot2, lattice, rstudioapi,
readr, plotly, htmltools, e1071,
randomForest, h2o, class, parallelSVM)
kNN_B0<-knnreg(x=as.matrix(building0[WAPs]), y=building0$LATITUDE, k=5)
pred_B0<- predict(kNN_B0, validation0)
building0<- train %>% filter(BUILDINGID==0) %>% mutate( FLOOR=as.character(FLOOR))   #78 Rooms 4Floors
building1<- train %>% filter(BUILDINGID==1) %>% mutate( FLOOR=as.character(FLOOR))
building2<- train %>% filter(BUILDINGID==2) %>% mutate( FLOOR=as.character(FLOOR))
validation0 <- validation %>% filter(BUILDINGID==0) %>%  mutate( FLOOR=as.character(FLOOR))
validation1 <- validation %>% filter(BUILDINGID==1)%>%  mutate( FLOOR=as.character(FLOOR))
validation2 <- validation %>% filter(BUILDINGID==2)%>%  mutate( FLOOR=as.character(FLOOR))
building0 <- building0 %>% mutate(FLOOR=as.factor(FLOOR))
building1 <- building1 %>% mutate(FLOOR=as.factor(FLOOR))
building2 <- building2 %>% mutate(FLOOR=as.factor(FLOOR))
validation0 <- validation0 %>% mutate(FLOOR=as.factor(FLOOR))
validation1 <- validation1 %>% mutate(FLOOR=as.factor(FLOOR))
validation2 <- validation2 %>% mutate(FLOOR=as.factor(FLOOR))
kNN_B0<-knnreg(x=as.matrix(building0[WAPs]), y=building0$LATITUDE, k=5)
pred_B0<- predict(kNN_B0, validation0)
#B0F0
WAPs<-grep("WAP|LONGITUDE", names(Training_sample), value=T)
#B0F0
WAPs<-grep("WAP|LONGITUDE", names(building0), value=T)
kNN_B0<-knnreg(x=as.matrix(building0[WAPs]), y=building0$LATITUDE, k=5)
pred_B0<- predict(kNN_B0, validation0)
kNN_B0
#Loading the data
#training_original<- read.csv("./datasets/trainingData.csv")
#validation_original<- read.csv("./datasets/validationData.csv")
train<- readRDS("./datasets/training2.rds")
validation<- readRDS("./datasets/validation2.rds")
#### Subsetting####
building0<- train %>% filter(BUILDINGID==0) %>% mutate( FLOOR=as.character(FLOOR))   #78 Rooms 4Floors
building1<- train %>% filter(BUILDINGID==1) %>% mutate( FLOOR=as.character(FLOOR))
building2<- train %>% filter(BUILDINGID==2) %>% mutate( FLOOR=as.character(FLOOR))
validation0 <- validation %>% filter(BUILDINGID==0) %>%  mutate( FLOOR=as.character(FLOOR))
validation1 <- validation %>% filter(BUILDINGID==1)%>%  mutate( FLOOR=as.character(FLOOR))
validation2 <- validation %>% filter(BUILDINGID==2)%>%  mutate( FLOOR=as.character(FLOOR))
building0 <- building0 %>% mutate(FLOOR=as.factor(FLOOR))
building1 <- building1 %>% mutate(FLOOR=as.factor(FLOOR))
building2 <- building2 %>% mutate(FLOOR=as.factor(FLOOR))
validation0 <- validation0 %>% mutate(FLOOR=as.factor(FLOOR))
validation1 <- validation1 %>% mutate(FLOOR=as.factor(FLOOR))
validation2 <- validation2 %>% mutate(FLOOR=as.factor(FLOOR))
####KNN without standarize####
set.seed(123)
## kNN Train Control
kNNcontrol <- trainControl(method = "repeatedcv", number = 6, repeats = 2, preProc = c("center", "range"))
building2<- train %>% filter(BUILDINGID==2) %>% mutate( FLOOR=as.character(FLOOR))
####0. Libraries and directories####
pacman::p_load(DT, dplyr, caret,
ggplot2, lattice, rstudioapi,
readr, plotly, htmltools, e1071,
randomForest, h2o, class, parallelSVM)
h2o.init( )
#setting up directory
current_path=getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
list.files("datasets/")
#Loading the data
#training_original<- read.csv("./datasets/trainingData.csv")
#validation_original<- read.csv("./datasets/validationData.csv")
train<- readRDS("./datasets/training2.rds")
validation<- readRDS("./datasets/validation2.rds")
#### Subsetting####
building0<- train %>% filter(BUILDINGID==0) %>% mutate( FLOOR=as.character(FLOOR))   #78 Rooms 4Floors
building1<- train %>% filter(BUILDINGID==1) %>% mutate( FLOOR=as.character(FLOOR))
building2<- train %>% filter(BUILDINGID==2) %>% mutate( FLOOR=as.character(FLOOR))
validation0 <- validation %>% filter(BUILDINGID==0) %>%  mutate( FLOOR=as.character(FLOOR))
validation1 <- validation %>% filter(BUILDINGID==1)%>%  mutate( FLOOR=as.character(FLOOR))
validation2 <- validation %>% filter(BUILDINGID==2)%>%  mutate( FLOOR=as.character(FLOOR))
building0 <- building0 %>% mutate(FLOOR=as.factor(FLOOR))
building1 <- building1 %>% mutate(FLOOR=as.factor(FLOOR))
building2 <- building2 %>% mutate(FLOOR=as.factor(FLOOR))
validation0 <- validation0 %>% mutate(FLOOR=as.factor(FLOOR))
validation1 <- validation1 %>% mutate(FLOOR=as.factor(FLOOR))
validation2 <- validation2 %>% mutate(FLOOR=as.factor(FLOOR))
####KNN without standarize####
set.seed(123)
## kNN Train Control
kNNcontrol <- trainControl(method = "repeatedcv", number = 6, repeats = 2, preProc = c("center", "range"))
#B0F0
WAPs<-grep("WAP|LONGITUDE", names(building0), value=T)
kNN_B0<-knnreg(x=as.matrix(building0[WAPs]), y=building0$LATITUDE, k=3)
pred_B0<- predict(kNN_B0, validation0)
metrics_B0F0<-postResample( pred_B0, validation0$LATITUDE)
validation0
kNN_B0
#B0F0
WAPs<-grep("WAP", names(building0), value=T)
kNN_B0<-knnreg(x=as.matrix(building0[WAPs]), y=building0$LATITUDE, k=3)
pred_B0<- predict(kNN_B0, validation0)
Training_sample <- building0
validation_sample<- validation0
WAPs<-grep("WAP|LONGITUDE", names(Training_sample), value=T)
preprocessParams<-preProcess(Training_sample[WAPs], method=c("center", "scale"))
valid_waps<-predict(preprocessParams, validation_sample[WAPs])
stand_waps<-predict(preprocessParams, Training_sample[WAPs])
stand_dataset<-cbind(stand_waps, BUILDINGID=Training_sample$BUILDINGID, FLOOR=Training_sample$FLOOR, LATITUDE=Training_sample$LATITUDE)
####KNN####
system.time(knn_reg<-knnreg(x=as.matrix(stand_dataset[WAPs]), y=stand_dataset$LATITUDE, k=5))
system.time(knn_predict<-predict(knn_reg, valid_waps))
postResample( knn_predict, validation_sample$LATITUDE)
Training_sample <- building1
validation_sample<- validation1
WAPs<-grep("WAP|LONGITUDE", names(Training_sample), value=T)
preprocessParams<-preProcess(Training_sample[WAPs], method=c("center", "scale"))
valid_waps<-predict(preprocessParams, validation_sample[WAPs])
stand_waps<-predict(preprocessParams, Training_sample[WAPs])
stand_dataset<-cbind(stand_waps, BUILDINGID=Training_sample$BUILDINGID, FLOOR=Training_sample$FLOOR, LATITUDE=Training_sample$LATITUDE)
####KNN####
system.time(knn_reg<-knnreg(x=as.matrix(stand_dataset[WAPs]), y=stand_dataset$LATITUDE, k=5))
system.time(knn_predict<-predict(knn_reg, valid_waps))
postResample( knn_predict, validation_sample$LATITUDE)
saveRDS(knn_reg, "./models/Building1_LATITUDE_KNN")
####KNN####
system.time(knn_reg<-knnreg(x=as.matrix(stand_dataset[WAPs]), y=stand_dataset$LATITUDE, k=3))
system.time(knn_predict<-predict(knn_reg, valid_waps))
postResample( knn_predict, validation_sample$LATITUDE)
####KNN####
system.time(knn_reg<-knnreg(x=as.matrix(stand_dataset[WAPs]), y=stand_dataset$LATITUDE, k=9))
system.time(knn_predict<-predict(knn_reg, valid_waps))
postResample( knn_predict, validation_sample$LATITUDE)
saveRDS(knn_reg, "./models/Building1_LATITUDE_KNN")
#LATITUDE MODELS
Building0_LATITUDE_RF<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "Building0_LATITUDE_RF"))
Building1_LATITUDE_KNN<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "Building1_LATITUDE_KNN"))
Building1_LATITUDE_KNN<-readRDS("./models/Building1_LATITUDE_KNN.rds"))
Building1_LATITUDE_KNN<-readRDS("./models/Building1_LATITUDE_KNN.rds")
saveRDS(knn_reg, "./models/Building1_LATITUDE_KNN.rds")
Building1_LATITUDE_KNN<-readRDS("./models/Building1_LATITUDE_KNN.rds")
Training_sample <- building2
validation_sample<- validation2
WAPs<-grep("WAP|LONGITUDE", names(Training_sample), value=T)
preprocessParams<-preProcess(Training_sample[WAPs], method=c("center", "scale"))
valid_waps<-predict(preprocessParams, validation_sample[WAPs])
stand_waps<-predict(preprocessParams, Training_sample[WAPs])
stand_dataset<-cbind(stand_waps, BUILDINGID=Training_sample$BUILDINGID, FLOOR=Training_sample$FLOOR, LATITUDE=Training_sample$LATITUDE)
system.time(knn_reg<-knnreg(x=as.matrix(stand_dataset[WAPs]), y=stand_dataset$LATITUDE, k=9))
system.time(knn_predict<-predict(knn_reg, valid_waps))
postResample( knn_predict, validation_sample$LATITUDE)
saveRDS(knn_reg, "./models/Building2_LATITUDE_KNN.rds")
####0. Libraries and directories####
pacman::p_load(DT, dplyr, caret, dplyr,
ggplot2, lattice, rstudioapi,
readr, plotly, htmltools, e1071,
randomForest, h2o, class, parallelSVM)
h2o.init( )
#setting up directory
current_path=getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
list.files("datasets/")
#Loading the data
#training_original<- read.csv("./datasets/trainingData.csv")
#validation_original<- read.csv("./datasets/validationData.csv")
train<- readRDS("./datasets/training2.rds")
validation<- readRDS("./datasets/validation2.rds")
# Load MODELS
rf_reg_caret<-readRDS("./models/RF_Model.rds")
#FLOOR MODELS
Building0_Model_GBM<-readRDS("./models/GBM_Floor_Building0.rds")
Building0_Model <- h2o.loadModel(path=paste0(getwd(),"/","models", "/", "RF_Floor_Building0"))
Building1_Model<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "ensemble_FLOOR_B1"))
Building2_Model<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "GBM_Floor_Building2"))
#LONGITUDE MODELS
Building0_LONGITUDE_RF<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "Building0_LONGITUDE_RF"))
Building1_LONGITUDE_RF<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "Building1_LONGITUDE_RF"))
Building2_LONGITUDE_RF<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "Building2_LONGITUDE_RF"))
#LATITUDE MODELS
Building0_LATITUDE_RF<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "Building0_LATITUDE_RF"))
Building1_LATITUDE_KNN<-readRDS("./models/Building1_LATITUDE_KNN.rds")
Building2_LATITUDE_KNN<-readRDS("./models/Building2_LATITUDE_KNN.rds")
#### Subsetting####
building0<- train %>% filter(BUILDINGID==0) %>% mutate( FLOOR=as.character(FLOOR))
building1<- train %>% filter(BUILDINGID==1) %>% mutate( FLOOR=as.character(FLOOR))
building2<- train %>% filter(BUILDINGID==2) %>% mutate( FLOOR=as.character(FLOOR))
validation0 <- validation %>% filter(BUILDINGID==0) %>%  mutate( FLOOR=as.character(FLOOR))
validation1 <- validation %>% filter(BUILDINGID==1)%>%  mutate( FLOOR=as.character(FLOOR))
validation2 <- validation %>% filter(BUILDINGID==2)%>%  mutate( FLOOR=as.character(FLOOR))
building0 <- building0 %>% mutate(FLOOR=as.factor(FLOOR))
building1 <- building1 %>% mutate(FLOOR=as.factor(FLOOR))
building2 <- building2 %>% mutate(FLOOR=as.factor(FLOOR))
validation0 <- validation0 %>% mutate(FLOOR=as.factor(FLOOR))
validation1 <- validation1 %>% mutate(FLOOR=as.factor(FLOOR))
validation2 <- validation2 %>% mutate(FLOOR=as.factor(FLOOR))
####GENERATING PREDICTIONS####
#Building
PREDICT1<-predict(rf_reg_caret, validation)
postResample(PREDICT1, validation$BUILDINGID)
#FLOOR BY BUILDING
#Building 1 & Longitude
train.h2o <- as.h2o(building0)
test.h2o <- as.h2o(validation0)
PRED_FBO <- as.data.frame(h2o.predict(Building0_Model, test.h2o))
postResample(PRED_FBO, validation0$FLOOR)
PRED_B0_LONG<- as.data.frame(h2o.predict(Building0_LONGITUDE_RF, test.h2o))
postResample(PRED_B0_LONG, validation0$LONGITUDE)
PRED_B0_LAT<- as.data.frame(h2o.predict(Building0_LATITUDE_RF, test.h2o))
postResample(PRED_B0_LAT, validation0$LATITUDE)
#Building 2
train.h2o <- as.h2o(building1)
test.h2o <- as.h2o(validation1)
PRED_FB1 <- as.data.frame(h2o.predict(Building1_Model, test.h2o))
postResample(PRED_FB1, validation1$FLOOR)
PRED_B1_LONG<- as.data.frame(h2o.predict(Building1_LONGITUDE_RF, test.h2o))
postResample(PRED_B1_LONG, validation1$LONGITUDE)
PRED_B1_LAT<-predict(Building1_LATITUDE_KNN, validation1)
postResample(PRED_B1_LAT, validation1$LATITUDE)
#Building 3
train.h2o <- as.h2o(building2)
test.h2o <- as.h2o(validation2)
PRED_FB2 <- as.data.frame(h2o.predict(Building2_Model, test.h2o))
postResample(PRED_FB2, validation2$FLOOR)
PRED_B2_LONG<- as.data.frame(h2o.predict(Building2_LONGITUDE_RF, test.h2o))
postResample(PRED_B2_LONG, validation2$LONGITUDE)
PRED_B2_LAT<-predict(Building2_LATITUDE_KNN, validation2)
postResample(PRED_B2_LAT, validation2$LATITUDE)
PRED_B1_LAT<-predict(Building1_LATITUDE_KNN, validation1)
PRED_B2_LAT<-predict(Building2_LATITUDE_KNN, validation2)
Training_sample <- building2
validation_sample<- validation2
WAPs<-grep("WAP|LONGITUDE", names(Training_sample), value=T)
preprocessParams<-preProcess(Training_sample[WAPs], method=c("center", "scale"))
valid_waps<-predict(preprocessParams, validation_sample[WAPs])
stand_waps<-predict(preprocessParams, Training_sample[WAPs])
stand_dataset<-cbind(stand_waps, BUILDINGID=Training_sample$BUILDINGID, FLOOR=Training_sample$FLOOR, LATITUDE=Training_sample$LATITUDE)
####KNN####
system.time(knn_reg<-knnreg(x=as.matrix(stand_dataset[WAPs]), y=stand_dataset$LATITUDE, k=9))
system.time(knn_predict<-predict(knn_reg, valid_waps))
postResample( knn_predict, validation_sample$LATITUDE)
saveRDS(knn_reg, "./models/Building2_LATITUDE_KNN.rds")
system.time(knn_predict<-predict(knn_reg, validation2))
Training_sample <- building2
validation_sample<- validation2
WAPs<-grep("WAP|LONGITUDE", names(Training_sample), value=T)
preprocessParams<-preProcess(Training_sample[WAPs], method=c("center", "scale"))
valid_waps<-predict(preprocessParams, validation_sample[WAPs])
stand_waps<-predict(preprocessParams, Training_sample[WAPs])
stand_dataset<-cbind(stand_waps, BUILDINGID=Training_sample$BUILDINGID, FLOOR=Training_sample$FLOOR, LATITUDE=Training_sample$LATITUDE)
PRED_B1_LAT<-predict(Building1_LATITUDE_KNN, valid_waps1)
postResample(PRED_B1_LAT, valid_waps1$LATITUDE)
Building1_LATITUDE_KNN<-readRDS("./models/Building1_LATITUDE_KNN.rds")
Building2_LATITUDE_KNN<-readRDS("./models/Building2_LATITUDE_KNN.rds")
####0. Libraries and directories####
pacman::p_load(DT, dplyr, caret, dplyr,
ggplot2, lattice, rstudioapi,
readr, plotly, htmltools, e1071,
randomForest, h2o, class, parallelSVM)
h2o.init( )
#setting up directory
current_path=getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
list.files("datasets/")
#Loading the data
#training_original<- read.csv("./datasets/trainingData.csv")
#validation_original<- read.csv("./datasets/validationData.csv")
train<- readRDS("./datasets/training2.rds")
validation<- readRDS("./datasets/validation2.rds")
# Load MODELS
rf_reg_caret<-readRDS("./models/RF_Model.rds")
#FLOOR MODELS
Building0_Model_GBM<-readRDS("./models/GBM_Floor_Building0.rds")
Building0_Model <- h2o.loadModel(path=paste0(getwd(),"/","models", "/", "RF_Floor_Building0"))
Building1_Model<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "ensemble_FLOOR_B1"))
Building2_Model<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "GBM_Floor_Building2"))
#LONGITUDE MODELS
Building0_LONGITUDE_RF<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "Building0_LONGITUDE_RF"))
Building1_LONGITUDE_RF<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "Building1_LONGITUDE_RF"))
Building2_LONGITUDE_RF<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "Building2_LONGITUDE_RF"))
#LATITUDE MODELS
Building0_LATITUDE_RF<-h2o.loadModel(path=paste0(getwd(),"/","models", "/", "Building0_LATITUDE_RF"))
Building1_LATITUDE_KNN<-readRDS("./models/Building1_LATITUDE_KNN.rds")
Building2_LATITUDE_KNN<-readRDS("./models/Building2_LATITUDE_KNN.rds")
##### STANDARIZE #####
WAPs<-grep("WAP|LONGITUDE", names(building1), value=T)
preprocessParams1<-preProcess(building1[WAPs], method=c("center", "scale"))
valid_waps1<-predict(preprocessParams1, validation1[WAPs])
stand_waps1<-predict(preprocessParams1, building1[WAPs])
stand_dataset1<-cbind(stand_waps1, BUILDINGID=building1$BUILDINGID, FLOOR=building1$FLOOR, LATITUDE=building1$LATITUDE)
WAPs<-grep("WAP|LONGITUDE", names(building2), value=T)
preprocessParams2<-preProcess(building2[WAPs], method=c("center", "scale"))
valid_waps2<-predict(preprocessParams2, validation2[WAPs])
stand_waps2<-predict(preprocessParams, building2[WAPs])
stand_dataset2<-cbind(stand_waps2, BUILDINGID=building2$BUILDINGID, FLOOR=building2$FLOOR, LATITUDE=building2$LATITUDE)
#### Subsetting####
building0<- train %>% filter(BUILDINGID==0) %>% mutate( FLOOR=as.character(FLOOR))
building1<- train %>% filter(BUILDINGID==1) %>% mutate( FLOOR=as.character(FLOOR))
building2<- train %>% filter(BUILDINGID==2) %>% mutate( FLOOR=as.character(FLOOR))
validation0 <- validation %>% filter(BUILDINGID==0) %>%  mutate( FLOOR=as.character(FLOOR))
validation1 <- validation %>% filter(BUILDINGID==1)%>%  mutate( FLOOR=as.character(FLOOR))
validation2 <- validation %>% filter(BUILDINGID==2)%>%  mutate( FLOOR=as.character(FLOOR))
building0 <- building0 %>% mutate(FLOOR=as.factor(FLOOR))
building1 <- building1 %>% mutate(FLOOR=as.factor(FLOOR))
building2 <- building2 %>% mutate(FLOOR=as.factor(FLOOR))
validation0 <- validation0 %>% mutate(FLOOR=as.factor(FLOOR))
validation1 <- validation1 %>% mutate(FLOOR=as.factor(FLOOR))
validation2 <- validation2 %>% mutate(FLOOR=as.factor(FLOOR))
####GENERATING PREDICTIONS####
#Building
PREDICT1<-predict(rf_reg_caret, validation)
postResample(PREDICT1, validation$BUILDINGID)
#FLOOR BY BUILDING
#Building 1 & Longitude
test0.h2o <- as.h2o(validation0)
PRED_FBO <- as.data.frame(h2o.predict(Building0_Model, test0.h2o))
postResample(PRED_FBO, validation0$FLOOR)
PRED_B0_LONG<- as.data.frame(h2o.predict(Building0_LONGITUDE_RF, test0.h2o))
postResample(PRED_B0_LONG, validation0$LONGITUDE)
PRED_B0_LAT<- as.data.frame(h2o.predict(Building0_LATITUDE_RF, test0.h2o))
postResample(PRED_B0_LAT, validation0$LATITUDE)
#Building 2
test1.h2o <- as.h2o(validation1)
PRED_FB1 <- as.data.frame(h2o.predict(Building1_Model, test1.h2o))
postResample(PRED_FB1, validation1$FLOOR)
PRED_B1_LONG<- as.data.frame(h2o.predict(Building1_LONGITUDE_RF, test1.h2o))
postResample(PRED_B1_LONG, validation1$LONGITUDE)
PRED_B1_LAT<-predict(Building1_LATITUDE_KNN, valid_waps1)
postResample(PRED_B1_LAT, valid_waps1$LATITUDE)
#Building 3
test2.h2o <- as.h2o(validation2)
PRED_FB2 <- as.data.frame(h2o.predict(Building2_Model, test.h2o))
postResample(PRED_FB2, validation2$FLOOR)
PRED_B2_LONG<- as.data.frame(h2o.predict(Building2_LONGITUDE_RF, test.h2o))
postResample(PRED_B2_LONG, validation2$LONGITUDE)
PRED_B2_LAT<-predict(Building2_LATITUDE_KNN, valid_waps2)
postResample(PRED_B2_LAT, valid_waps2$LATITUDE)
source('C:/Users/Sergi Ch/Downloads/UBIQUM/UBIQUM/Wifi Locationing/scripts/06 Wifi Locationing_ERRORS_PLOTTING.R', echo=TRUE)
stand_waps2<-predict(preprocessParams2, building2[WAPs])
stand_dataset2<-cbind(stand_waps2, BUILDINGID=building2$BUILDINGID, FLOOR=building2$FLOOR, LATITUDE=building2$LATITUDE)
####GENERATING PREDICTIONS####
#Building
PREDICT1<-predict(rf_reg_caret, validation)
postResample(PREDICT1, validation$BUILDINGID)
#FLOOR BY BUILDING
#Building 1 & Longitude
test0.h2o <- as.h2o(validation0)
PRED_FBO <- as.data.frame(h2o.predict(Building0_Model, test0.h2o))
postResample(PRED_FBO, validation0$FLOOR)
PRED_B0_LONG<- as.data.frame(h2o.predict(Building0_LONGITUDE_RF, test0.h2o))
postResample(PRED_B0_LONG, validation0$LONGITUDE)
PRED_B0_LAT<- as.data.frame(h2o.predict(Building0_LATITUDE_RF, test0.h2o))
postResample(PRED_B0_LAT, validation0$LATITUDE)
#Building 2
test1.h2o <- as.h2o(validation1)
PRED_FB1 <- as.data.frame(h2o.predict(Building1_Model, test1.h2o))
postResample(PRED_FB1, validation1$FLOOR)
PRED_B1_LONG<- as.data.frame(h2o.predict(Building1_LONGITUDE_RF, test1.h2o))
postResample(PRED_B1_LONG, validation1$LONGITUDE)
PRED_B1_LAT<-predict(Building1_LATITUDE_KNN, valid_waps1)
postResample(PRED_B1_LAT, valid_waps1$LATITUDE)
#Building 3
test2.h2o <- as.h2o(validation2)
PRED_FB2 <- as.data.frame(h2o.predict(Building2_Model, test.h2o))
postResample(PRED_FB2, validation2$FLOOR)
PRED_B2_LONG<- as.data.frame(h2o.predict(Building2_LONGITUDE_RF, test.h2o))
postResample(PRED_B2_LONG, validation2$LONGITUDE)
PRED_B2_LAT<-predict(Building2_LATITUDE_KNN, valid_waps2)
postResample(PRED_B2_LAT, valid_waps2$LATITUDE)
test2.h2o <- as.h2o(validation2)
PRED_FB2 <- as.data.frame(h2o.predict(Building2_Model, test2.h2o))
postResample(PRED_FB2, validation2$FLOOR)
PRED_B2_LONG<- as.data.frame(h2o.predict(Building2_LONGITUDE_RF, test2.h2o))
postResample(PRED_B2_LONG, validation2$LONGITUDE)
PRED_B2_LAT<-predict(Building2_LATITUDE_KNN, valid_waps2)
postResample(PRED_B2_LAT, valid_waps2$LATITUDE)
PRED_B2_LAT
valid_waps2$LATITUDE
WAPs<-grep("WAP|LONGITUDE", names(building1), value=T)
building0<- train %>% filter(BUILDINGID==0) %>% mutate( FLOOR=as.character(FLOOR))
building1<- train %>% filter(BUILDINGID==1) %>% mutate( FLOOR=as.character(FLOOR))
building2<- train %>% filter(BUILDINGID==2) %>% mutate( FLOOR=as.character(FLOOR))
validation0 <- validation %>% filter(BUILDINGID==0) %>%  mutate( FLOOR=as.character(FLOOR))
validation1 <- validation %>% filter(BUILDINGID==1)%>%  mutate( FLOOR=as.character(FLOOR))
validation2 <- validation %>% filter(BUILDINGID==2)%>%  mutate( FLOOR=as.character(FLOOR))
building0 <- building0 %>% mutate(FLOOR=as.factor(FLOOR))
building1 <- building1 %>% mutate(FLOOR=as.factor(FLOOR))
building2 <- building2 %>% mutate(FLOOR=as.factor(FLOOR))
validation0 <- validation0 %>% mutate(FLOOR=as.factor(FLOOR))
validation1 <- validation1 %>% mutate(FLOOR=as.factor(FLOOR))
validation2 <- validation2 %>% mutate(FLOOR=as.factor(FLOOR))
WAPs<-grep("WAP|LONGITUDE", names(building1), value=T)
preprocessParams1<-preProcess(building1[WAPs], method=c("center", "scale"))
valid_waps1<-predict(preprocessParams1, validation1[WAPs])
valid_waps1
stand_waps1<-predict(preprocessParams1, building1[WAPs])
stand_dataset1<-cbind(stand_waps1, BUILDINGID=building1$BUILDINGID, FLOOR=building1$FLOOR, LATITUDE=building1$LATITUDE)
PRED_B1_LAT<-predict(Building1_LATITUDE_KNN, valid_waps1)
postResample(PRED_B1_LAT, valid_waps1$LATITUDE)
postResample(PRED_B1_LAT, validation1$LATITUDE)
postResample(PRED_B2_LAT, validation2$LATITUDE)
