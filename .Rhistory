aes(color = newData_Sampled$weekday, fill = newData_Sampled$weekday),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean"
)
aes(color = "blue", fill = "blue"),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean")+
geom_bar(data =newData_Sampled, aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_2), col = "red")
aes(color = "blue", fill = "blue"),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean") +
geom_bar(data =newData_Sampled, aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_2), col = "red")
ggplot(newData_Sampled, aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_1)) +
geom_bar()+
geom_bar(data =newData_Sampled, aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_2), col = "red")
ggplot(newData_Sampled, aes(x =newData_Sampled$weekday, y = newData_Sampled$Sub_metering_1)) +
geom_bar()+
geom_bar(data =newData_Sampled, aes(x = newData_Sampled$weekday, y = newData_Sampled$Sub_metering_2), col = "red")
ggplot(Subset_1, aes(x = DateTime, y = Subset_1$Sub_metering_1))
ggplot(Subset_1, aes(x = DateTime, y = Subset_1$Sub_metering_1)) +
geom_smooth()
ggplot(newData_Sampled, aes(x =newData_Sampled$weekday, y = newData_Sampled$Sub_metering_1)) +
geom_bar()
ggplot(newData_Sampled, aes(x =newData_Sampled$weekday, y = newData_Sampled$Sub_metering_1))
ggplot(newData_Sampled, aes(x =newData_Sampled$weekday, y = newData_Sampled$Sub_metering_1)) +
geom_bar(data =newData_Sampled, aes(x = newData_Sampled$weekday, y = newData_Sampled$Sub_metering_2), col = "red")
ggplot(newData_Sampled, aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_1)) +
geom_bar(
aes(color = "blue", fill = "blue"),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean")
ggplot(newData_Sampled, aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_1)) +
geom_bar(
aes(color = "blue", fill = "blue"),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean") +
geom_bar(data =newData_Sampled, aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_2), col = "red")
ggplot(newData_Sampled, aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_1)) +
geom_bar(
aes(color = "blue", fill = "blue"),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean") +
geom_bar(
aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_2, color = "blue", fill = "blue"),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean")
ggplot(newData_Sampled, aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_1)) +
geom_bar(
aes(color = "blue", fill = "blue"),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean") +
geom_bar(
aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_2, color = newData_Sampled$Sub_metering_1, fill = newData_Sampled$Sub_metering_1),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean")
ggplot(newData_Sampled, aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_1)) +
geom_bar(
aes(color = newData_Sampled$Sub_metering_1, fill = newData_Sampled$Sub_metering_1),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean") +
geom_bar(
aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_2, color = newData_Sampled$Sub_metering_2, fill = newData_Sampled$Sub_metering_2),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean")
ggplot(newData_Sampled, aes(x = factor(newData_Sampled$weekday), y = Sub_metering_1)) +
geom_bar(
aes(color = newData_Sampled$Sub_metering_1, fill = newData_Sampled$Sub_metering_1),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean") +
geom_bar(
aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_2, color = newData_Sampled$Sub_metering_2, fill = newData_Sampled$Sub_metering_2),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean")
ggplot(newData_Sampled, aes(x = weekday, y = Sub_metering_1)) +
geom_bar(
aes(color = newData_Sampled$Sub_metering_1, fill = newData_Sampled$Sub_metering_1),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean") +
geom_bar(
aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_2, color = newData_Sampled$Sub_metering_2, fill = newData_Sampled$Sub_metering_2),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean")
aes(color = newData_Sampled$Sub_metering_1, fill = newData_Sampled$Sub_metering_1),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean") +
geom_bar(
ggplot(newData_Sampled, aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_1)) +
geom_bar(
aes(color = "blue", fill = "blue"),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean") +
geom_bar(
aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_2, color = newData_Sampled$Sub_metering_1, fill = newData_Sampled$Sub_metering_1),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean")
ggplot(newData_Sampled, aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_1)) +
geom_bar(
aes(color = "blue", fill = "blue"),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean") +
geom_bar(
aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_2, color = newData_Sampled$Sub_metering_1, fill = newData_Sampled$Sub_metering_1),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean")
ggplot(newData_Sampled, aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_1)) +
geom_bar(
aes(color = "blue", fill = "blue"),
stat = "summary", position = position_dodge(0.8),
width = 0.7, fun.y = "mean") +
geom_bar(
aes(x = factor(newData_Sampled$weekday), y = newData_Sampled$Sub_metering_2, color = newData_Sampled$Sub_metering_1, fill = newData_Sampled$Sub_metering_1),
stat = "summary", position = position_dodge(0.4),
width = 0.7, fun.y = "mean")
aes(color = "blue", fill = "blue"),
stat = "summary", position = position_dodge(0.8),
width = 0.35, fun.y = "mean") +
geom_bar(
aes(color = "blue", fill = "blue"),
stat = "summary", position = position_dodge(0.8),
width = 0.4, fun.y = "mean") +
geom_bar(
aes(color = "blue", fill = "blue"),
stat = "summary", position = position_dodge(0.8),
width = 0.4, fun.y = "mean") +
geom_bar(
library(ggplot2)
library(ggplot2)
driver<-dbDriver("PostgreSQL")
library(RPostgreSQL)
install.packages(RPostgreSQL)
install.packages("RPostgreSQL")
library("RPostgreSQL")
driver<-dbDriver("PostgreSQL")
library(readr)
Plotting_in_R_tutorial_data_deltaDNA <- read_csv("C:/Users/Sergi Ch/Downloads/Plotting-in-R-tutorial-data-deltaDNA.csv",
col_types = cols(X1 = col_skip()))
View(Plotting_in_R_tutorial_data_deltaDNA)
data <- read_csv("C:/Users/Sergi Ch/Downloads/Plotting-in-R-tutorial-data-deltaDNA.csv",
+     col_types = cols(X1 = col_skip()))
data <- read_csv("C:/Users/Sergi Ch/Downloads/Plotting-in-R-tutorial-data-deltaDNA.csv", col_types = cols(X1 = col_skip()))
View(data)
library(libridate)
library(lubridate)
data <-
mutate(data,
date_difference = start_date %--% last_seen,
days_seen = date_difference %/% days(1)) %>%
select(-date_difference) # We won't need this again, so we can drop it
View(data)
data <-
mutate(data,
date_difference = start_date %--% last_seen,
days_seen = date_difference %/% days(1)) %>%
select(-date_difference) # We won't need this again, so we can drop it
days_seen = date_difference %/% days(1)
library(lubridate)
days_seen = date_difference %/% days(1)
data <-
mutate(data,
date_difference = start_date %--% last_seen,
days_seen = date_difference %/% days(1)) %>%
select(-date_difference) # We won't need this again, so we can drop it
library(readr)
data <- read_csv("C:/Users/Sergi Ch/Downloads/Plotting-in-R-tutorial-data-deltaDNA.csv",
col_types = cols(X1 = col_skip(), last_seen = col_date(format = "%d/%m/%Y"),
start_date = col_date(format = "%d/%m/%Y")))
View(data)
remove(Plotting_in_R_tutorial_data_deltaDNA)
data <- read_csv("C:/Users/Sergi Ch/Downloads/Plotting-in-R-tutorial-data-deltaDNA.csv", col_types = cols(X1 = col_skip(), last_seen = col_date(format = "%d/%m/%Y"), start_date = col_date(format = "%d/%m/%Y")))
View(data)
data <-
mutate(data,
date_difference = start_date %--% last_seen,
days_seen = date_difference %/% days(1)) %>%
select(-date_difference) # We won't need this again, so we can drop it
ggplot(data)+
aes(x=days_seen, y=level)+
geom_point()
ggplot(data)+
aes(x=days_seen, y=level)+
geom_point()
ggplot(data)+
aes(x=days_seen, y=level)+
geom_line()
ggplot(data)+
aes(x=days_seen, y=level)+
geom_point(colour='deepping3', alpha=0.2)
ggplot(data)+
aes(x=days_seen, y=level)+
geom_point(colour='deeppink3', alpha=0.2)
ggplot(data)+
aes(x=days_seen, y=level)+
geom_point(colour='deeppink3', alpha=0.2)
####1.LOADING DATA #####
Data_COMPLETE <- read_delim("C:/Users/Sergi Ch/Downloads/UBIQUM/PROJECT 3/TASK 3.1/Data/household_power_consumption.txt",";", escape_double = FALSE, trim_ws = TRUE)
####0.LIBRARIES AND DIRECTORIES####
if(require("pacman")=="FALSE"){
install.packages('pacman')
library('pacman')
pacman::p_load(here, stringr, readxl, plyr, caret, dplyr, doParallel,
lubridate, crayon, corrplot, ggplot2, e1071, reshape2,
tidyverse, arules, arulesViz, rstudioapi, RMySQL, esquisse, lubridate)
} else {
library('pacman')
pacman::p_load(here, stringr, readxl, plyr, caret, dplyr, doParallel,
lubridate, crayon, corrplot, ggplot2, e1071, reshape2,
tidyverse, arules, arulesViz, rstudioapi,RMySQL, esquisse, lubridate)
}
####1.LOADING DATA #####
Data_COMPLETE <- read_delim("C:/Users/Sergi Ch/Downloads/UBIQUM/PROJECT 3/TASK 3.1/Data/household_power_consumption.txt",";", escape_double = FALSE, trim_ws = TRUE)
View(Data_COMPLETE)
## Importing The Clean Data ----
CleanData <- readRDS("EnergyCleanData.rds")
View(CleanData)
#create year, quarter, month, week, weekday, day, hour and minute
newData$year <- year(newData$DateTime)
newData$month <- month(newData$DateTime)
## Feature Engineering (run if you need certain time variables) ----
CleanData$Year <- year(CleanData$DateTime)
CleanData$Month <- month(CleanData$DateTime)
View(CleanData)
april<- CleanData %>%
filter(Year==2008, Month==4)
View(april)
CleanData$Week <- week(CleanData$DateTime)
april<- CleanData %>%
filter(Year==2008, Month==4) %>%
group_by(Week) %>%
summarize(missing=sum(Week))
View(april)
source('C:/Users/Sergi Ch/Downloads/UBIQUM/R/dplyr_Workshop_student.R', echo=TRUE)
msleep %>%
select(name) %>%
filter(starts_with(sl))
msleep %>%
select(name) %>%
filter(starts_with("sl"))
?starts_with
msleep %>%
select(name) %>%
filter(starts_with('sl'))
msleep %>%
select(name)
msleep %>%
select(name) %>%
filter(starts_with('sl'))
library(cowsay)
say("KIKO <3 PENIS", "chicken")
say("KIKO <3 PENIS", "cat")
say("VAL <3 PENIS", "cat")
say("VAL <3 PENIS", "catface")
say("VAL <3 PENIS", "shark")
say("boo!", "ghost")
say("hello world", by = "cow", type = "warning")
say(what = "arresteddevelopment",
by = sample(names(animals), 1),
what_color = rgb(.1, .2, .3),
by_color = sample(colors(), 5),
type = "message")
say(what = "arresteddevelopment",
by = sample(names(animals), 1),
type = "message")
say(what = "arresteddevelopment",
by = sample(names(animals), 1),
type = "message")
say("hello world", by = "cow", type = "warning")
msleep %>%
select(name, starts_with('sl')) %>%
filter(starts_with('sl'))
msleep %>%
select(name, starts_with('sl'))
newdf<- msleep %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
View(newdf)
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total)) %>%
filter(mean<2, mean>19)
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total)) %>%
filter(mean>2, mean<19)
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
filter(sleep_total>2, sleep_total<19) %>%
summarise(mean=mean(sleep_total))
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
filter(sleep_total>2, sleep_total<19)
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
filter(sleep_total>2 | sleep_total<19) %>%
summarise(mean=mean(sleep_total))
newdf<- msleep %>%
group_by(vore) %>%
filter(sleep_total>2 | sleep_total<19)
View(newdf)
newdf<- msleep %>%
group_by(vore) %>%
filter(sleep_total>2 , sleep_total<19)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
View(newdf)
newdf1<- msleep %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
View(newdf1)
View(msleep)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(conservation!=domesticated) %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(conservation!='domesticated') %>%
group_by(vore) %>%
summarise(mean=mean(sleep_total))
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(conservation!='domesticated')
View(newdf)
newdf<- msleep %>% drop_na
newdf<- msleep %>% is.na
View(newdf)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(is.na=TRUE)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(is.na==TRUE)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(conservation!='domesticated')
View(newdf)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(!conservation %in% 'domesticated')
View(newdf)
newdf<- msleep %>%
filter(sleep_total>2 , sleep_total<19) %>%
filter(conservation!='domesticated')
View(newdf)
View(msleep)
View(newdf)
View(msleep)
View(msleep)
newdfNONA<- msleep %>%
na.omit()%>%
mtcars
qplot(disp, mpg, data=mtcars)
library(ggplot2)
qplot(disp, mpg, data=mtcars)
ggplot(mtcars, aes(x=disp, mpg))
ggplot(mtcars, aes(x=disp, mpg))+
geom_point()
ggplot(mtcars, aes(x=disp, mpg))+
geom_bar()
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line()
ggplot(mydata, aes(x=xcol, y=ycol), ylim=0) + geom_line()
ggplot(pressure, aes(x=xcol, y=ycol), ylim=0) + geom_line()
source('~/.active-rstudio-document', echo=TRUE)
xvar
zvar
rep(1, 1500)
(2, 1500)
rep(2, 1500)
xy
g1<-ggplot(xy, aes(xvar))+
geom_histogram()
g1
plot(xvar)
hist(xvar)
g1
g1<-ggplot(xy, aes(xvar))+
geom_histogram(binwidth = 1)
ggplot(xy, aes(xvar))+
geom_histogram(binwidth = 1)
ggplot(xy, aes(xvar))+
geom_histogram(fill=NA)
ggplot(xy, aes(xvar))+
geom_histogram(fill=NA, color='black')
ggplot(xy, aes(xvar))+
geom_histogram(fill=NA, color='black') +
theme_bw()
ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
theme_bw()
g1<-ggplot(xy, aes(xvar))+
geom_histogram(fill=NA, color='black') +
theme_bw()
g2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
theme_bw()
grid.arrange(g1, g2, nrow=1)
p1<-ggplot(xy, aes(xvar)) + geom_density()
p1
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
geom_density(color="blue")
ps
p2
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill='black') +
geom_density(color="blue")
p2
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill='yellow') +
geom_density(color="blue")
p2
p3<-ggplot(xy, aes(xvar, fill = zvar)) + geom_density(alpha = 0.2)
p3
p3
grid.arrange(p1, p2, p3, nrow=1)
####BOXPLOT####
b1<-ggplot(xy, aes(zvar, xvar)) +
geom_boxplot(aes(fill = zvar)) +
theme(legend.position = "none")
b1
#jitter plot
b2<-ggplot(xy, aes(zvar, xvar)) +
geom_jitter(alpha=I(1/4), aes(color=zvar)) +
theme(legend.position = "none")
b2
#volcano plot
b3<-ggplot(xy, aes(x = xvar)) +
stat_density(aes(ymax = ..density..,  ymin = -..density..,
fill = zvar, color = zvar),
geom = "ribbon", position = "identity") +
facet_grid(. ~ zvar) +
coord_flip() +
theme(legend.position = "none")
b3
grid.arrange(b1, b2, b3, nrow=1)
#rug plot
ggplot(xy,aes(xvar,yvar))  + geom_point() + geom_rug(col="darkred",alpha=.1)
#rug plot
R1<-ggplot(xy,aes(xvar,yvar))  + geom_point() + geom_rug(col="darkred",alpha=.1)
#placeholder plot - prints nothing at all
empty <- ggplot()+geom_point(aes(1,1), colour="white") +
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
)
empty
#scatterplot of x and y variables
scatter <- ggplot(xy,aes(xvar, yvar)) +
geom_point(aes(color=zvar)) +
scale_color_manual(values = c("orange", "purple")) +
theme(legend.position=c(1,1),legend.justification=c(1,1))
scatter
#marginal density of x - plot on top
plot_top <- ggplot(xy, aes(xvar, fill=zvar)) +
geom_density(alpha=.5) +
scale_fill_manual(values = c("orange", "purple")) +
theme(legend.position = "none")
plot_top
#marginal density of y - plot on the right
plot_right <- ggplot(xy, aes(yvar, fill=zvar)) +
geom_density(alpha=.5) +
coord_flip() +
scale_fill_manual(values = c("orange", "purple")) +
theme(legend.position = "none")
plot_right
#arrange the plots together, with appropriate height and width for each row and column
grid.arrange(plot_top, empty, scatter, plot_right, ncol=2, nrow=2, widths=c(4, 1), heights=c(1, 4))
source('~/.active-rstudio-document', echo=TRUE)
install.packages(shiny)
install.packages("shiny")
install.packages("shiny")
install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
load("C:/Users/Sergi Ch/Downloads/UBIQUM/PROJECT 1/TASK 1/Blackwell_Hist_Sample.csv")
load("C:/Users/Sergi Ch/Downloads/UBIQUM/Blackwell_Hist_Sample.csv")
load("C:/Users/Sergi Ch/Downloads/Blackwell_Hist_Sample.csv")
source('C:/Users/Sergi Ch/Downloads/UBIQUM/PROJECT 3/ENERGY CONSUMPTION git/T3 EnergyConsumption/Scripts/task33_Forecasting.R', echo=TRUE)
#check accuracy
AR_accuracy_month<-accuracy(forecast_AR_month,test_month)
AR_accuracy_month
#setting up directory
current_path=getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
list.files("datasets/")
training<- read.csv("./datasets/trainingData.csv")
validation<- read.csv("./datasets/validationData.csv")
#check the Column Names
colnames(training)
colnames(validation)
View(training)
